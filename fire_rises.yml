---
- hosts: linkies
  pre_tasks:
  - name: Install python2 for full ansible functionality - NB not installed by default on Ubuntu Xenial - Can be ommitted on distros that ship with python 2.7
    raw: bash -c "test -e /usr/bin/python || (apt -qqy update && apt install -qqy python-minimal)"
    register: output
    changed_when: output.stdout != ""
  tasks: 
  - name: Iptables - allow all TCP OUT on port 6688 for CHAINLINK
    iptables: 
      chain: INPUT
      protocol: tcp
      destination_port: 6688
      jump: ACCEPT
    become: yes
  - name: Iptables - allow all TCP OUT on port 6688 for CHAINLINK
    iptables:
      chain: OUTPUT
      protocol: tcp
      source_port: 6688
      jump: ACCEPT
    become: yes
  - name: Iptables - allow all UDP OUT on port 6688 for CHAINLINK
    iptables:
      chain: INPUT
      protocol: udp
      destination_port: 6688
      jump: ACCEPT
    become: yes
  - name: Iptables - allow all UDP OUT on port 6688 for CHAINLINK
    iptables:
      chain: OUTPUT
      protocol: udp
      source_port: 6688
      jump: ACCEPT
    become: yes
  - name: Iptables - allow TCP IN on port 22 for SSH
    iptables:
      chain: INPUT
      protocol: tcp
      destination_port: 22
      ctstate: NEW,ESTABLISHED
      jump: ACCEPT
    become: yes
  - name: Iptables - allow TCP replies on port 22 for SSH
    iptables:
      chain: OUTPUT
      protocol: tcp
      source_port: 22
      ctstate: ESTABLISHED
      jump: ACCEPT
    become: yes
  - name: Iptables - allow DNS TCP traffic OUT
    iptables:
      chain: OUTPUT
      protocol: tcp
      destination_port: 53
      ctstate: NEW,ESTABLISHED
      jump: ACCEPT
    become: yes

  - name: Iptables - allow DNS TCP replies IN in response
    iptables:
      chain: INPUT
      protocol: tcp
      source_port: 53
      ctstate: ESTABLISHED
      jump: ACCEPT
    become: yes
  - name: Iptables - allow DNS UDP traffic OUT
    iptables:
      chain: OUTPUT
      protocol: udp
      destination_port: 53
      ctstate: NEW,ESTABLISHED
      jump: ACCEPT
    become: yes
  - name: Iptables - allow DNS UDP replies IN in response
    iptables:
      chain: INPUT
      protocol: udp
      source_port: 53
      ctstate: ESTABLISHED
      jump: ACCEPT
    become: yes
  - name: Iptables - allow HTTP TCP OUT for UPDATES, GITHUB, etc
    iptables:
      chain: OUTPUT
      protocol: tcp
      destination_port: 80
      ctstate: NEW,ESTABLISHED
      jump: ACCEPT
    become: yes
  - name: Iptables - allow HTTP TCP back IN for UPDATES, GITHUB, etc
    iptables:
      chain: INPUT
      protocol: tcp
      source_port: 80
      ctstate: ESTABLISHED
      jump: ACCEPT
    become: yes
  - name: Iptables - allow HTTPS TCP OUT for UPDATES and GITHUB
    iptables:
      chain: OUTPUT
      protocol: tcp
      destination_port: 443
      ctstate: NEW,ESTABLISHED
      jump: ACCEPT
    become: yes
  - name: Iptables - allow HTTPS TCP back IN for UPDATES and GITHUB
    iptables:
      chain: INPUT
      protocol: tcp
      source_port: 443
      ctstate: ESTABLISHED
      jump: ACCEPT
  - name: Iptables - allow ALL IN on LOOPBACK INTERFACE
    iptables:
      chain: INPUT
      in_interface: lo
      jump: ACCEPT
    become: yes
  - name: Iptables - allow ONLY SOURCE 127.0.0.1 on LOOPBACK INTERFACE to prevent spoofing
    iptables:
      chain: INPUT
      in_interface: lo
      source: ! 127.0.0.1
      jump: REJECT
    become: yes
  - name: Iptables - DROP ALL other traffic on default INPUT chain
    iptables:
      chain: INPUT
      policy: DROP
    become: yes
  - name: Iptables - DROP ALL other traffic on default OUTPUT chain
    iptables:
      chain: OUTPUT
      policy: DROP
    become: yes
  - name: Iptables - DROP ALL traffic from default FORWARDING chain
    iptables:
      chain: FORWARD
      policy: DROP
    become: yes
  - name: Install iptables-persistent to run rules at boot in future
    apt: 
      name: iptables-persistent
    become: yes
  - name: Save the iptables configuration 
    shell: 'sudo iptables-save > /etc/iptables/rules.v4' 
    become: yes
  - name: Update repositories cache and install screen from apt - screen makes interaction over ssh significantly easier
    apt:
      name: screen
      update_cache: yes
    become: true
  - name: Install tcpdump from apt - Useful to monitor traffic ad hoc
    apt: 
      name: tcpdump
    become: true
  - name: Install htop from apt - info rich and lets us know whats running on our box at a glance if we are  concerned with malware or intrusion
    apt: 
      name: htop
    become: true
  - name: Set PATH in /etc/environment to include /usr/lib/go-1.9/bin and remove ubuntu games directories while we're about it
    lineinfile:
      path: /etc/environment
      regexp: '^PATH'
      line: PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/go-1.9/bin:/home/vagrant/go/bin"
    become: true
  - name: Set GOPATH in /etc/environment to be /home/vagrant/go 
    lineinfile:
      path: /etc/environment
      line: GOPATH=/home/vagrant/go
  - name: Create a /home/vagrant/go/bin dir for dep install script
    file:
      path: /home/vagrant/go/bin
      owner: vagrant
      state: directory
  - name: Load the ppa repo for go from google
    apt_repository:
      repo: 'ppa:gophers/archive'
  - name: Install go1.9 using apt command
    apt:
      name: golang-1.9-go
      update_cache: yes
  - name: Get dep online install script and make it executable
    get_url: 
      url: https://raw.githubusercontent.com/golang/dep/master/install.sh
      dest: /home/vagrant
      mode: +x
  - name: Run the online dep install script 
    command: /home/vagrant/install.sh creates=/home/vagrant/go/bin/dep
    environment: 
      PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/lib/go-1.9/bin:/home/vagrant/go/bin"
  - name: Download Chainlink from Smartcontract github, check its not already downloaded first.
    command: /usr/lib/go-1.9/bin/go get -d github.com/smartcontractkit/chainlink creates=/home/vagrant/go/src/github.com/smartcontractkit/
  - name: Install chainlink using make install in its dir, checking its not already installed first
    command: make install creates="/home/vagrant/go/bin/chainlink" 
    args:
      chdir: "/home/vagrant/go/src/github.com/smartcontractkit/chainlink"
    environment: 
      GOPATH: '/home/vagrant/go'
      PATH: '/home/vagrant/bin:/home/vagrant/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/lib/go-1.9/bin:/home/vagrant/go:/home/vagrant/go/bin:/snap/bin' 
    become: true
  - import_role:
      name: ansible-hardening
...
